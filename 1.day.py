"""
列表list 列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。
列表是写在方括号 [] 之间、用逗号分隔开的元素列表
list = ['abcd', 786, 2.23, 'runoob', 70.2]
"""
##################################################################################################################
"""
元组tuple  元组和列表相似，唯一的区别是元组的元素不能修改,元组写在小括号 () 里，元素之间用逗号隔开。
注意：
1、与字符串一样，元组的元素不能修改。
2、元组也可以被索引和切片，方法一样。
3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。
4、元组也可以使用 + 操作符进行拼接。
tuple = ('abc', 688, 243.23)
"""
###################################################################################################################
"""
集合（Set）是一种无序、可变的数据类型，用于存储唯一的元素。集合中的元素不会重复，并且可以进行交集、并集、差集等常见的集合操作。在 Python 中，集合使用大括号 {} 表示，元素之间用逗号 , 分隔。
另外，也可以使用 set() 函数创建集合。
注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。
set = {value01,value02}
或者
set(value)
"""
setCS = {'taobao', 'pdd', 'jd', 'pdd'}
print(setCS)  # 会自动去除重复项
# 输出结果 {'taobao', 'jd', 'pdd'}
# 集合可以进行集合运算
a = set('abcdefg')
b = set('abcd')

print(a - b)  # a和b的差集
print(a | b)  # a和b的并集
print(a & b)  # a和b的交集
print(a ^ b)  # a和b中不同时存在的元素

# 输出结果
# {'f', 'e', 'g'}
# {'a', 'd', 'g', 'e', 'b', 'f', 'c'}
# {'a', 'b', 'd', 'c'}
# {'f', 'g', 'e'}
print("####################")
###################################################################################################################
"""
字典（dictionary）是Python中另一个非常有用的内置数据类型。
列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。
字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。
键(key)必须使用不可变类型。
在同一个字典中，键(key)必须是唯一的
"""
dict = {}
dict ['one'] = "1 - 河南"
dict [2] = "2 - 驻马店"

tinydict = {'name': 'runoob', 'code': 1}

print(dict['one'])
print(dict[2])
print("####################")
###################################################################################################################
"""
逻辑运算符
or  逻辑或  x or y    x为true，则不计算y，直接返回true；x为false，则返回y       一个为真返回真，两个假返回假   

and 逻辑与 x and y    x为true，则返回y的值x为false，则不计算y，直接返回false    两个真返回真，一个假返回假

not 逻辑非  not x     x为true，返回false；x为false，返回true                 真返回假，假返回真
"""
age = 25
bb = 0
nationality = "Chinese"
# 使用or运算符判断多个条件
if age >= 18 or nationality == "Chinese":
    print("年龄大于等于18或者是中国人")
# 使用and运算符判断多个条件
if age >= 18 and nationality == "Chinese":
    print("年龄大于等于18并且是中国人")
# 使用not判断
if not bb:
    print("bb是0，0是false")
print("####################")
###################################################################################################################
"""
成员运算符 
in	    如果在指定的序列中找到值返回 True，否则返回 False。	    x 在 y 序列中 , 如果 x 在 y 序列中返回 True。
not in	如果在指定的序列中没有找到值返回 True，否则返回 False。	x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。
"""
numbers_a = 10
numbers_b = 20
list_cy = [10, 22, 30]

if ( numbers_a in list_cy ):
    print("10在列表中")
else:
    print("10不在列表中")

if ( numbers_b not in list_cy):
    print("20不在列表中")
else:
    print("20在列表中")
# 成员运算符的操作对象可以是任何支持迭代的数据类型，包括列表、元组、字符串、集合和字典（对于字典，in 检查的是键而不是值）。
# 在字典中使用 in 时，如果要检查值而不是键，可以使用 value in dict.values()。
# 定义一个字典
capitals = {"France": "Paris", "Italy": "Rome", "Germany": "Berlin"}

# 检查键 "Italy" 是否在字典中
print("Italy" in capitals)  # 输出：True

# 检查值 "Paris" 是否在字典的值中
print("Paris" in capitals.values())  # 输出：True

# 检查 "London" 是否不在字典的值中
print("London" not in capitals.values())  # 输出：True
print("####################")
###################################################################################################################
"""
身份运算符 
is        运算符‌：用于判断两个变量是否引用同一个对象。 x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False
is not    运算符‌：用于判断两个变量是否引用不同对象。   x is not y ， 类似 id(x) != id(y)。如果引用的不是同一个对象则返回结果 True，否则返回 False
####### id() 函数用于获取对象内存地址。
特别注意
身份运算符比较的是对象的身份（内存地址），而不是它们的值。即使两个对象的内容完全相同，它们也可能是不同的对象，各自占用不同的内存空间。
对于基本数据类型（如整数、浮点数、布尔值等），Python内部会进行一些优化，例如小整数的缓存。这意味着某些情况下，即使你创建了两个不同的整数对象，它们也可能指向相同的内存地址（例如，对于较小的整数，Python通常会重用内存中的相同对象）。但这是一种实现细节，不应依赖于这种行为进行逻辑判断。
使用==运算符比较的是对象的值是否相等，而不是它们的身份。如果你关心的是对象的内容是否相同，应该使用==
"""
# 定义两个列表
a = [1, 2, 3]
b = a  # b直接引用a的内存地址
c = [1, 2, 3]  # c是一个新的列表对象

# 使用身份运算符
print(a is b)  # 输出 True，因为a和b指向同一个对象
print(a is c)  # 输出 False，因为a和c是不同的对象，尽管它们的内容相同

print(a is not c)  # 输出 True，因为a和c指向的不是同一个对象
print(b is not c)  # 输出 True，因为b和c指向的不是同一个对象

print("####################")
###################################################################################################################
"""
Python 支持三种不同的数值类型：
整型(int) - 通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作 Long 类型使用，所以 Python3 没有 Python2 的 Long 类型。布尔(bool)是整型的子类型。
浮点型(float) - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）
复数( (complex)) - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。

Python 数字类型转换
int(x) 将x转换为一个整数。
float(x) 将x转换到一个浮点数。
complex(x) 将x转换到一个复数，实数部分为 x，虚数部分为 0。
complex(x, y) 将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式
"""

print( 17.0 // 3)